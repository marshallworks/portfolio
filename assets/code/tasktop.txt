///<reference path="./utilities.ts"/>
///<reference path="./interactions.ts"/>

module TT.Resources {

	var render_target: HTMLElement;
	var more_step: number = 12;
	var current_step: number = 1;
	var state: ResourceState;

	/*
	== TYPES
	*/
	interface Resource {
		title: string;
		description: string;
		type: string;
		image: string;
		icon: string;
		link: string;
		product: string[];
		topics: string[];
		types: string[];
		updated: Date;
		elements: {};
		render: () => HTMLElement;
	}

	interface ResourceState {
		container: HTMLElement;
		filters: {
			container: HTMLElement;
			search: FilterElement;
			products: FilterElement;
			types: FilterElement;
			topics: FilterElement;
		};
		resources: Resource[];
		active_resources: Resource[];
	}

	enum FilterTypes { Select, Hybrid, Search }

	interface FilterElement {
		placeholder: string;
		all_options: FilterOption[];
		active_options: FilterOption[];
		type: FilterTypes;
		elements: {};
		getSelected: () => string;
		render: () => void;
	}

	interface FilterOption {
		title: string;
		matches: number;
		render: () => HTMLElement;
	}

	/*
	== TRANSFORMS
	*/
	var create_resource = function(attr): Resource {
		var title = attr.type.toUpperCase(),
			description = attr.field_description,
			type = attr.type.toLowerCase().replace(' ', '-'),
			image = attr.field_image || '',
			icon = attr.field_icon_image || 'TAS-Resources-Icon.png',
			link = attr.field_link,
			product = readableListToArray(attr.field_product),
			types = [attr.type],
			topics = readableListToArray(attr.field_topics),
			updated = getDateFromString(attr.last_updated);
		image = image.trim()
		icon = icon.trim();
		var youTube;
		var imageContainerContents = [];
		if (image !== '') {
			imageContainerContents = [{
				image: 'img',
				attributes: {
					src: '/sites/default/files/' + image,
					alt: title,
					width: '253',
					height: '125'
				}
			}];
		}
		var domStruc = [{
			baseRow: 'div.views-row.' + type,
			children: [{
				resource: 'div.resource.' + type,
				children: [{
					imageContainer: 'a.image-container[href="' + link + '", target="_blank"]',
					children: imageContainerContents
				}, {
						headerContainer: 'h3.resource-type',
						children: [{
							headerLink: 'a[href="' + link + '", target="_blank"]',
							children: [{
								icon: 'span.icon',
								children: [{
									iconImage: 'img[src="/sites/default/files/' + icon +'"]'
								}]
							}, 'inner:' + title]
						}]
					}, {
						// detailContainer: 'div.details>inner:<p>' + description + '</p><span class="date">' + convertDateToString(updated) + '</span>'
						detailContainer: 'div.details>inner:<p>' + description + '</p>'
					}]
			}]
		}];
		var elements = UT.html(domStruc);
		youTube = UT.getYouTubeID(elements['headerLink']);
		if (youTube.id !== '') {
			UT.on(elements['resource'], 'click', function(event) {
				event.preventDefault();
				TT.Interactions.create_youTubeModal(youTube).render();
			});
		}
		var render = function(): HTMLElement {
			return elements['baseRow'];
		};
		return {
			title,
			description,
			type,
			image,
			icon,
			link,
			product,
			types,
			topics,
			updated,
			elements,
			render
		};
	};

	var create_filterElement = function(attr): FilterElement {
		var placeholder = attr.placeholder || '',
			all_options = attr.options || [],
			active_options = attr.options || [],
			type = attr.type || FilterTypes.Select;
		var selected = placeholder;
		var active_option = 0;
		var valueString = 'span.value';
		if (type === FilterTypes.Search || type === FilterTypes.Hybrid) {
			valueString = 'input.value[type="text"]';
		}
		var domStruc = [{
			container: 'div.filter-' + FilterTypes[type].toLowerCase(),
			children: [{
				value: valueString
			},{
				activate: 'span.activate>inner:<span class="icon"></span>'
			},{
				options: 'div.options'
			}]
		}];
		var elements = UT.html(domStruc);
		var render = function() {
			if (type === FilterTypes.Search || type === FilterTypes.Hybrid) {
				elements['value'].value = selected;
			} else {
				elements['value'].innerHTML = selected;
			}
			update_options();
		};
		var update_options = function(addDefault = true) {
			elements['options'].innerHTML = '';
			if (type !== FilterTypes.Search && addDefault) {
				var defaultOption = document.createElement('span');
				defaultOption.className = 'default';
				defaultOption.innerHTML = placeholder;
				UT.on(defaultOption, 'click', selectValue);
				elements['options'].appendChild(defaultOption);
			}
			active_options.forEach(function(opt, ind) {
				var rendOption = opt.render();
				if (type === FilterTypes.Hybrid && selected !== placeholder && ind === active_option) {
					rendOption.classList.add('active');
				}
				UT.on(rendOption, 'click', selectValue);
				elements['options'].appendChild(rendOption);
			});
		};
		var selectValue = function(event: MouseEvent) {
			var src = <HTMLElement>event.target || <HTMLElement>event.srcElement;
			selected = src.innerText || src.textContent;
			close();
			setFilterState();
		};
		var getSelected = function(): string {
			if (selected === placeholder) {
				return '';
			}
			return selected;
		};
		var onFocus = function() {
			if (elements['value'].value === placeholder) {
				elements['value'].value = '';
			}
		};
		var onBlur = function() {
			if (elements['value'].value === '') {
				elements['value'].value = placeholder;
			}
		};
		var onSearchKeyUp = function(event: KeyboardEvent) {
			selected = elements['value'].value;
			if (event.keyCode === 10 || event.keyCode === 13) {
				event.preventDefault();
				close();
				setFilterState();
			} else {
				setFuzzyState();
			}
		};
		var onHybridKeyUp = function(event: KeyboardEvent) {
			selected = elements['value'].value;
			var filteredSet;
			if (event.keyCode === 10 || event.keyCode === 13) {
				event.preventDefault();
				selected = active_options[active_option].title;
				close();
				setFilterState();
			} else if (event.keyCode === 37 || event.keyCode === 38) {
				event.preventDefault();
				active_option -= 1;
				if (active_option < 0) {
					active_option = 0;
				}
				update_options(false);
				open();
			} else if (event.keyCode === 39 || event.keyCode === 40) {
				event.preventDefault();
				active_option += 1;
				if (active_option > active_options.length - 1) {
					active_option = active_options.length - 1;
				}
				update_options(false);
				open();
			} else {
				filteredSet = all_options.filter(function(element) {
					return fuzzy_inString(selected, element.title);
				});
				active_option = 0;
				active_options = filteredSet;
				update_options(false);
				open();
			}
		};
		var open = function() {
			elements['container'].classList.add('active');
		};
		var close = function() {
			elements['container'].classList.remove('active');
		};
		var toggle = function() {
			elements['container'].classList.toggle('active');
		};
		if (type === FilterTypes.Select) {
			UT.on(elements['value'], 'click', toggle)
		}
		if (type === FilterTypes.Select || type === FilterTypes.Hybrid) {
			UT.on(elements['activate'], 'click', toggle);
		}
		if (type === FilterTypes.Search || type === FilterTypes.Hybrid) {
			UT.on(elements['value'], 'focus', onFocus);
			UT.on(elements['value'], 'blur', onBlur);
		}
		if (type === FilterTypes.Hybrid) {
			UT.on(elements['value'], 'keyup', onHybridKeyUp);
		}
		if (type === FilterTypes.Search) {
			UT.on(elements['value'], 'keyup', onSearchKeyUp);
		}
		return Object.freeze({
			type,
			placeholder,
			all_options,
			active_options,
			elements,
			getSelected,
			render
		});
	};

	var create_filterOption = function(attr) {
		var title: string = attr.title || '';
		var matches: number = attr.matches || 0;
		var render = function(): HTMLElement {
			var spanItem = document.createElement('span');
			spanItem.innerHTML = title;
			return spanItem;
		};
		return Object.freeze({
			title,
			matches,
			render
		});
	};

	var create_resourceState = function(attr): ResourceState {
		var container = document.createElement('div');
		var resources = attr.resources || [];
		var active_resources = sort_resources(resources);
		var filters = {
			container: document.createElement('div'),
			search: create_filterElement(attr.search),
			products: create_filterElement(attr.products),
			types: create_filterElement(attr.types),
			topics: create_filterElement(attr.topics)
		};
		filters.container.className = 'resource-filters';
		var searchContainer = document.createElement('div');
		searchContainer.className = 'search-bar';
		searchContainer.appendChild(filters.search.elements['container']);
		filters.container.appendChild(searchContainer);
		filters.container.appendChild(filters.products.elements['container']);
		filters.container.appendChild(filters.types.elements['container']);
		filters.container.appendChild(filters.topics.elements['container']);
		return Object.freeze({
			container,
			filters,
			resources,
			active_resources
		});
	};

	var update_resourceState = function(updateState: ResourceState, attr): ResourceState {
		var container = updateState.container;
		var resources = updateState.resources;
		var active_resources = sort_resources(attr.resources);
		var filters = updateState.filters;
		return Object.freeze({
			container,
			filters,
			resources,
			active_resources
		});
	};

	var get_resource_data = function() {
		UT.getJSON('/sites/default/files/resources.json', function(data) {
			build_resource(data);
		});
	};

	var filter_resources = function(filterResources: Resource[], filters): Resource[] {
		var filtered = filterResources.filter(function(res) {
			var result = true;
			if (filters.product !== '' && !fuzzy_inArray(filters.product, res.product)) {
				result = false;
			}
			if (filters.type !== '' && !fuzzy_inString(filters.type, res.type.replace('-', ' '))) {
				result = false;
			}
			if (filters.topic !== '' && !fuzzy_inArray(filters.topic, res.topics)) {
				result = false;
			}
			return result;
		});
		return filtered;
	};

	var fuzzy_resources = function(filterResources: Resource[], str: string): Resource[] {
		var filtered = filterResources.filter(function(res: Resource) {
			var inTitle = fuzzy_inString(str, res.title);
			var inDescription = fuzzy_inString(str, res.description);
			var inType = fuzzy_inString(str, res.type);
			var inProduct = fuzzy_inArray(str, res.product);
			var inTopics = fuzzy_inArray(str, res.topics);
			if (inTitle || inDescription || inType || inProduct || inTopics) {
				return true;
			}
			return false;
		});
		return filtered;
	};

	var fuzzy_inString = function(needle: string, haystack: string): boolean {
		if (haystack.toLowerCase().indexOf(needle.toLowerCase().trim()) >= 0) {
			return true;
		}
		return false;
	};

	var fuzzy_inArray = function(needle: string, haystack: string[]): boolean {
		var result = false;
		haystack.forEach(function(hay) {
			if (fuzzy_inString(needle, hay)) {
				result = true;
			}
		});
		return result;
	};

	var sort_resources = function(resources: Resource[]): Resource[] {
		resources.sort(function(a, b) {
			if (a.updated < b.updated) {
				return 1;
			}
			if (a.updated > b.updated) {
				return -1;
			}
			return 0;
		});
		return resources;
	};

	var build_resource = function(data) {
		var newState = {
			resources: []
		};
		data.nodes.forEach(function(res) {
			newState.resources.push(create_resource(res.resource));
		});
		newState['search'] = {
			placeholder: 'Search',
			options: build_full_filterOptions(newState.resources),
			type: FilterTypes.Search
		};
		newState['products'] = {
			placeholder: 'Product',
			options: build_filterOptions(newState.resources, 'product'),
			type: FilterTypes.Select
		};
		newState['types'] = {
			placeholder: 'Content Type',
			options: build_filterOptions(newState.resources, 'types'),
			type: FilterTypes.Select
		};
		newState['topics'] = {
			placeholder: 'Topics',
			options: build_filterOptions(newState.resources, 'topics'),
			type: FilterTypes.Hybrid
		};
		state = create_resourceState(newState);
		render_resourceState(state, current_step);
	};

	var update_resources = function(resState: ResourceState) {
		var filters = {
			product: resState.filters.products.getSelected(),
			type: resState.filters.types.getSelected(),
			topic: resState.filters.topics.getSelected()
		}
		var preFilter = filter_resources(resState.resources, filters);
		state = update_resourceState(resState, {
			resources: fuzzy_resources(preFilter, resState.filters.search.getSelected())
		});
		render_resourceState(state, current_step);
	}

	/*
	== RENDER
	*/
	var render_resourceState = function(renState: ResourceState, step: number) {
		var rendered = UT.qs('.resource-filters');
		if (!rendered) {
			render_target.innerHTML = '';
		}
		renState.filters.products.render();
		renState.filters.types.render();
		renState.filters.topics.render();
		renState.filters.search.render();
		if (renState.active_resources.length > 0) {
			render_resources(renState.active_resources, renState.container, step * more_step);
		} else {
			renState.container.innerHTML = '<h1>No Matches</h1>';
		}
		if (!rendered) {
			render_target.appendChild(renState.filters.container);
			render_target.appendChild(renState.container);
		}
	};

	var render_resources = function(resList: Resource[], target: HTMLElement, amount: number): void {
		var moreLink, moreContainer;
		target.innerHTML = '';
		resList.forEach(function(res, index) {
			if (index < amount) {
				target.appendChild(res.render());
			}
		});
		if (resList.length > amount) {
			moreContainer = <HTMLElement>document.createElement('div');
			moreContainer.className = 'load-more';
			moreLink = <HTMLAnchorElement>document.createElement('a');
			moreLink.innerHTML = 'Load More';
			moreLink.className = 'button';
			UT.on(moreLink, 'click', moreResources);
			moreContainer.appendChild(moreLink);
			target.appendChild(moreContainer);
		}
	}

	/*
	== HELPERS
	*/
	var readableListToArray = function(str) {
		var arr = str.split(',');
		arr = arr.map(function(element) {
			return element.trim();
		});
		return arr;
	};

	// TODO: Enable sort options.
	var build_full_filterOptions = function(resList: Resource[], sort: string = 'alpha'): FilterOption[] {
		var filterList = [];
		resList.forEach(function(res) {
			filterList.push(create_filterOption({
				title: res.title,
				matches: 1
			}));
		});
		return filterList;
	};

	var build_filterOptions = function(resList: Resource[], items: string, sort: string = 'alpha'): FilterOption[] {
		var filterList = [], keyList = [];
		var filterCounts = {};
		resList.forEach(function(res) {
			res[items].forEach(function(item) {
				if (filterCounts.hasOwnProperty(item)) {
					filterCounts[item] += 1;
				} else {
					filterCounts[item] = 1;
				}
			});
		});
		keyList = Object.keys(filterCounts);
		keyList.forEach(function(key) {
			filterList.push(create_filterOption({
				title: key,
				matches: filterCounts[key],
			}));
		});
		return filterList;
	};

	var unique = function(arr) {
		return arr.filter(function(element, index, array) {
			return array.indexOf(element) >= index;
		});
	};

	var getDateFromString = function(str: string): Date {
		var parts = str.split('-');
		var year = parseInt(parts[0], 10);
		var month = parseInt(parts[1], 10) - 1;
		var day = parseInt(parts[2], 10);
		return new Date(year, month, day);
	};

	var convertDateToString = function(date: Date): string {
		var monthList = ['January', 'February', 'March', 'April', 'May', 'June ', 'July', 'August', 'September', 'October', 'November', 'December'];
		return monthList[date.getUTCMonth()] + ' ' + date.getUTCDate() + ', ' + date.getUTCFullYear();
	};

	/*
	== ACTIONS
	*/
	var moreResources = function() {
		current_step += 1;
		update_resources(state);
	};

	var setFilterState = function() {
		current_step = 1;
		update_resources(state);
	};

	var fuzzyTimeout = null;

	var setFuzzyState = function() {
		if (fuzzyTimeout !== null) {
			clearTimeout(fuzzyTimeout);
			fuzzyTimeout = null;
		}
		fuzzyTimeout = setTimeout(function() {
			current_step = 1;
			update_resources(state);
		}, 400);
	};

	/*
	== INITIALIZERS
	*/
	export var init = function() {
		if (location.pathname === '/resources' || location.pathname === '/resources/') {
			render_target = document.createElement('div');
			render_target.className = 'resources-block';
			UT.qs('.primary-content').appendChild(render_target);
			get_resource_data();
		}
	};

}