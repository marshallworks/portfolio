class Whoop.Bracelet
	constructor: (@attributes = {}) ->
		@id = @attributes.id or Whoop.Story.generateId()
		@element = @attributes.element or false
		@rotation = @attributes.rotation or 0
		@rotationTarget = @attributes.rotationTarget or 0
		@highlightsList = @attributes.highlightsList or []
		@highlights = @attributes.highlights or {}
		@rotationSpeed = @attributes.rotationSpeed or 36
		@imagesList = @attributes.imagesList or []
		@images = @attributes.images or {}
		@allFetched = @attributes.allFetched or false
		@dimensions = @attributes.dimensions or { width: 826, height: 644 }
		@position = @attributes.position or { top: 40, left: '25%' }
		@properties = @attributes.properties or {
			position: 'absolute'
			backgroundSize: 'contain'
			backgroundRepeat: 'no-repeat'
			zIndex: 500
		}
		return @

	gotoRotation: (rot) ->
		@rotationTarget = rot
		if @rotation isnt @rotationTarget
			if @rotation - @rotationTarget > 0
				createAnimation(thatPrev, @, @rotationSpeed)
			else
				createAnimation(thatNext, @, @rotationSpeed)
		return @

	createAnimation = (f, that, interval) ->
		window.BraceletAnimationInterval = setInterval(->
			f(that)
		, interval)
		return true

	destroyAnimation = ->
		clearInterval(window.BraceletAnimationInterval)
		window.BraceletAnimationInterval = null
		return true

	thatNext = (that) ->
		that.next()
		return that

	thatPrev = (that) ->
		that.prev()
		return that

	next: ->
		@rotation += 2
		if @rotation > 358 then @rotation = 0
		if @rotation isnt @rotationTarget
			@element.css(
				backgroundImage: 'url(' + @images['bracelet-at-' + @rotation].src + ')'
			)
		else destroyAnimation()
		return @

	prev: ->
		@rotation -= 2
		if @rotation < 0 then @rotation = 358
		if @rotation isnt @rotationTarget
			@element.css(
				backgroundImage: 'url(' + @images['bracelet-at-' + @rotation].src + ')'
			)
		else destroyAnimation()
		return @

	addHighlight: (highlight) ->
		@highlightsList.push(highlight)
		@highlights[highlight.id] = highlight
		return @

	addImages: ->
		for rotation in [0...360] by 2
			newBraceletImage = new Whoop.Bracelet.Image(
				id: 'bracelet-at-' + rotation
				src: '/sites/all/themes/whoop/ux/assets/bracelet/' + rotation + '.png'
			)
			@imagesList.push(newBraceletImage)
			@images[newBraceletImage.id] = newBraceletImage
		return @

	fetchImages: (stageId) ->
		for img in @imagesList
			preLoadImage(stageId, img)
		return @

	isLoadComplete: ->
		filtered = @imagesList.filter(isFetched)
		if filtered.length is @imagesList.length then return true else return false

	updateItem = (stageId, imageId, updates) ->
		MainWhoopStory.stages[stageId].bracelet.images[imageId].loaded(updates)
		return MainWhoopStory.stages[stageId].bracelet

	preLoadImage = (stageId, img) ->
		imageElement = new Image()
		imageElement.onload = ->
			imageDimensions =
				width: imageElement.width
				height: imageElement.height
			updateItem(stageId, img.id, {element: imageElement, dimensions: imageDimensions})
		imageElement.src = img.src

	isFetched = (element) ->
		return element.fetched

	render: ->
		if not @element
			@element = jQuery('<div id="' + @id + '" class="whoop-bracelet-wrap"></div>')
			for img in @imagesList
				@element.append(img.render())
			@element.css(
				top: @position.top
				left: @position.left
				width: @dimensions.width
				height: @dimensions.height
			)
			@element.css(@properties)
		return @element

class Whoop.Bracelet.Image
	constructor: (@attributes = {}) ->
		@id = @attributes.id or Whoop.Story.generateId()
		@element = @attributes.element or false
		@src = @attributes.src or 'none'
		@fetched = false
		@dimensions = @attributes.dimensions or { width: 826, height: 644 }
		@position = @attributes.position or { top: 0, left: 0 }
		@properties = @attributes.properties or {
			position: 'absolute'
			display: 'none'
		}
		return @

	loaded: (updates) ->
		@element = updates.element
		@dimensions = updates.dimensions
		@fetched = true
		return @

	render: ->
		if not @element
			@element = jQuery('<img id="' + @id + '" class="whoop-bracelet-image" src="' + @src + '">')
			@element.css(
				top: @position.top
				left: @position.left
				width: @dimensions.width
				height: @dimensions.height
			)
			@element.css(@properties)
		return @element

class Whoop.Bracelet.Highlight
	constructor: (@attributes = {}) ->
		@id = @attributes.id or Whoop.Story.generateId()
		@element = @attributes.element or false
		@position = @attributes.position or { top: 0, left: 0 }
		@size = @attributes.size or 0
		@properties = @attributes.properties or {
			position: 'absolute'
		}
		return @

	render: ->
		if not @element and @size > 0
			@element = jQuery('<div id="' + @id + '" class="whoop-bracelet-highlight"></div>')
			@element.css(
				top: @top + '%'
				left: @left + '%'
				width: @size + '%'
				height: @size + '%'
			)
		return @element