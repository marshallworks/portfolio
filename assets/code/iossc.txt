window.IHWW = {}

class IHWW.Calendars
	NAMES_MONTH_LONG: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
	NAMES_MONTH_SHORT: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
	NAMES_DAY_LONG: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
	NAMES_DAY_SHORT: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
	SECOND_DELTA = 1000
	MINUTE_DELTA = 60
	HOUR_DELTA = 60
	DAY_DELTA = 24
	WEEK_DELTA = 7
	SECOND_MS: 1 * SECOND_DELTA
	MINUTE_MS: 1 * MINUTE_DELTA * SECOND_DELTA
	HOUR_MS: 1 * HOUR_DELTA * MINUTE_DELTA * SECOND_DELTA
	DAY_MS: 1 * DAY_DELTA * HOUR_DELTA * MINUTE_DELTA * SECOND_DELTA
	WEEK_MS: 1 * WEEK_DELTA * DAY_DELTA * HOUR_DELTA * MINUTE_DELTA * SECOND_DELTA
	NOW_DATE: new Date()
	NOW_TIME: new Date().getTime()

	constructor: (@attributes = {}) ->
		nunjucks.configure({ autoescape: false });
		@id = @generateIdString()
		@events = {}
		@groups = {}
		@order = []
		@period = @attributes.period or 'days'
		@adjust = @attributes.adjust or {days: 0}
		@change = @adjust
		@start = @attributes.start or 'now'
		@amount = @attributes.amount or 1
		@center = @start
		@style = @attributes.style or 'default'
		@weekStartDay = @attributes.weekStartDay or 'Sunday'
		@maxJump = 26
		@jumpCounter = 0
		init(@)
		return @

	init = (calendar) ->
		if calendar.start is 'now'
			calendar.NOW_DATE = new Date()
			calendar.NOW_TIME = calendar.NOW_DATE.getTime()
			calendar.center = calendar.NOW_TIME
		else if calendar.start is 'today'
			calendar.center = new Date(calendar.NOW_DATE.getFullYear(), calendar.NOW_DATE.getMonth(), calendar.NOW_DATE.getDate()).getTime()
		else if calendar.start is 'yesterday'
			calendar.center = calendar.NOW_TIME - calendar.DAY_MS
		else if calendar.start is 'tomorrow'
			calendar.center = calendar.NOW_TIME + calendar.DAY_MS
		else if typeof calendar.start is 'string'
			calendar.center = convertStringToTime(calendar.start)
		else
			calendar.center = new Date(calendar.from).getTime()
		calendar.center = calendar.calculateRelative(calendar.adjust, calendar.center)
		calendar.change =
			years: 0
			months: 0
			weeks: 0
			days: 0
			hours: 0
			minutes: 0
			seconds: 0
		addGroup(calendar)

	render: ->
		$('.' + @id).empty()
		for groupId in @order
			$('.' + @id).append(@groups[groupId].render(@style))
		$('.today').trigger('click')
		return @

	renderNoEvents: ->
		$('.' + @id).empty()
		$('.' + @id).append('<h3>&nbsp;&nbsp;Thank you for a great season! Check back for a new season coming soon.</h3>')
		return @

	add: (groupAttributes) ->
		@change = groupAttributes.change or @change
		addGroup(@)
		return @

	next: ->
		@order = []
		@groups = {}
		if @period is 'month'
			@change.months++
		else if @period is 'week'
			@change.weeks++
		else if @period is 'days'
			@change.days += @amount
		else
			@change.days++
		addGroup(@)
		return @

	prev: ->
		@jumpCounter = @maxJump + 1
		@order = []
		@groups = {}
		if @period is 'month'
			@change.months--
		else if @period is 'week'
			@change.weeks--
		else if @period is 'days'
			@change.days -= @amount
		else
			@change.days--
		addGroup(@)
		return @

	reset: ->
		@order = []
		@groups = {}
		@change =
			years: 0
			months: 0
			weeks: 0
			days: 0
			hours: 0
			minutes: 0
			seconds: 0
		addGroup(@)
		return @

	addGroup = (calendar) ->
		groupObject =
			type: calendar.period
			change: calendar.change
			from: calendar.center
			number: 1
			weekStartDay: calendar.weekStartDay
		if calendar.period is 'month'
			groupObject.type = 'month'
		else if calendar.period is 'week'
			groupObject.type = 'week'
		else if calendar.period is 'day'
			groupObject.type = 'days'
			groupObject.number = 1
		else
			groupObject.type = 'days'
			groupObject.number = calendar.amount
		if calendar.weekStartDay is 'today' then groupObject.weekStartDay = calendar.NAMES_DAY_LONG[calendar.NOW_DATE.getDay()]
		if calendar.period is 'month' or calendar.period is 'week'
			for [0...calendar.amount]
				if calendar.period is 'month'
					groupObject.change.months += _i
				else if calendar.period is 'week'
					groupObject.change.weeks += _i
				newgroup = new IHWW.Calendars.Group(groupObject)
				calendar.groups[newgroup.id] = newgroup
				calendar.order.push(newgroup.id)
		else
			newgroup = new IHWW.Calendars.Group(groupObject)
			calendar.groups[newgroup.id] = newgroup
			calendar.order.push(newgroup.id)
		sortGroups(calendar)
		return calendar

	sortGroups = (calendar) ->
		calendar.order.sort((a, b) ->
			if calendar.groups[a].order[0] instanceof Array
				aTime = calendar.groups[a].days[calendar.groups[a].order[0][0]].timeStamp
			else
				aTime = calendar.groups[a].days[calendar.groups[a].order[0]].timeStamp
			if calendar.groups[a].order[0] instanceof Array
				bTime = calendar.groups[b].days[calendar.groups[b].order[0][0]].timeStamp
			else
				bTime = calendar.groups[b].days[calendar.groups[b].order[0]].timeStamp
			if (aTime < bTime)
				return -1
			if (aTime > bTime)
				return 1
			return 0
		)
		calendar.getEvents(calendar.id)
		return calendar

	getEvents: ->
		calendar = @
		url = '/events'
		start = false
		stop = false
		groupIdFst = @order[0]
		groupIdLst = @order[@order.length - 1]
		collectionFst = @groups[groupIdFst].order
		collectionLst = @groups[groupIdLst].order
		if collectionFst[0] instanceof Array
			dayListFst = collectionFst[0]
			dayListLst = collectionLst[collectionLst.length - 1]
			dayIdFst = dayListFst[0]
			dayIdLst = dayListLst[dayListLst.length - 1]
		else
			dayIdFst = collectionFst[0]
			dayIdLst = collectionLst[collectionLst.length - 1]
		dayFst = @groups[groupIdFst].days[dayIdFst]
		dayLst = @groups[groupIdLst].days[dayIdLst]
		start = dayFst.getString('%yyyy-%MM-%dd')
		stop = dayLst.getString('%yyyy-%MM-%dd')
		if start.length is 10 and stop.length is 10
			url += '?start=' + start + '&end=' + stop
		$.ajax(url)
			.done((data)->
				result = processEvents(calendar, data.events)
				if result is false
					calendar.renderNoEvents()
			)
			.fail((msg)->
				console.log(msg.status)
			)
		return @

	processEvents = (calendar, events) ->
		if events.length > 0 or calendar.jumpCounter > calendar.maxJump
			calendar.jumpCounter = 0
			for event in events
				eventObject =
					timeStamp: convertStringToTime(event.departure)
					id: event.id
					name: event.name
					type: event.cruise_type
					seats: event.remaining_seats
					description: event.description
					duration: event.duration
				if not calendar.events.hasOwnProperty(event.id)
					calendar.events[event.id] = new IHWW.Calendars.Event(eventObject)
			for groupId in calendar.order
				group = calendar.groups[groupId]
				if group.order[0] instanceof Array
					for collection in group.order
						for dayId in collection
							day = group.days[dayId]
							for eventId, event of calendar.events
								if event.midnight is day.midnight
									day.addEvent(event)
				else
					for dayId in group.order
						day = group.days[dayId]
						for eventId, event of calendar.events
							if event.midnight is day.midnight
								day.addEvent(event)
			calendar.render()
		else
			if calendar.jumpCounter < calendar.maxJump
				calendar.jumpCounter++
				calendar.next()
			else
				return false
		return calendar

	printDateList: (format = '%dddd -> %d %M %yyyy') ->
		for groupId in @order
			group = @groups[groupId]
			if group.order[0] instanceof Array
				@printNestedDateList(group)
			else
				for day in group.order
					console.log(group.days[day].getString(format))
			console.log('-------------------------Break_________________________')
		return @

	printNestedDateList: (group) ->
		for collection in group.order
			datesString = ''
			for day in collection
				dateString = 'C'
				if group.days[day].past then dateString = 'P'
				if group.days[day].today then dateString = 'T'
				dateString += group.days[day].getString('%MM-%dd-%yyyy') + ' [' + group.days[day].order.length + '] | '
				if group.days[day].placeholder then dateString = 'X00-00-0000 [0] | '
				datesString += dateString
			console.log(datesString)
		return @

	convertStringToTime = (string) ->
		intYear = parseInt(string.substr(0,4))
		intMonth = parseInt(string.substr(5,2)) - 1
		intDay = parseInt(string.substr(8,2))
		intHour = 0
		intMinute = 0
		if string.indexOf('T') isnt -1
			intHour = parseInt(string.substr(11,2))
			intMinute = parseInt(string.substr(14,2))
		return new Date(intYear, intMonth, intDay, intHour, intMinute).getTime()

	calculateRelative: (changeObject = false, from = false) ->
		if not from or not @isInt(from) then from = new Date().getTime()
		fromDate = new Date(from)
		fromTime = fromDate.getTime()
		if changeObject
			adjust =
				years: if (changeObject.hasOwnProperty('years')) then parseInt(changeObject.years) else 0
				months: if (changeObject.hasOwnProperty('months')) then parseInt(changeObject.months) else 0
				weeks: if (changeObject.hasOwnProperty('weeks')) then parseInt(changeObject.weeks) else 0
				days: if (changeObject.hasOwnProperty('days')) then parseInt(changeObject.days) else 0
				hours: if (changeObject.hasOwnProperty('hours')) then parseInt(changeObject.hours) else 0
				minutes: if (changeObject.hasOwnProperty('minutes')) then parseInt(changeObject.minutes) else 0
				seconds: if (changeObject.hasOwnProperty('seconds')) then parseInt(changeObject.seconds) else 0
			if @isInt(adjust.years) and @isInt(adjust.months) and @isInt(adjust.weeks) and @isInt(adjust.days) and @isInt(adjust.hours) and @isInt(adjust.minutes) and @isInt(adjust.seconds)
				yearMonths = 0
				if adjust.years isnt 0
					yearMonths = 12 * adjust.years
				monthsNegative = if adjust.months + yearMonths < 0 then true else false
				monthsAbsolute = Math.abs(adjust.months + yearMonths)
				daysInMonthsAdjust = 0
				if monthsAbsolute isnt 0
					monthCounter = monthsAbsolute
					monthNumber = fromDate.getMonth()
					yearNumber = fromDate.getFullYear()
					if monthsNegative
						negYearAdjust = Math.floor(monthsAbsolute / 12)
						negMonthAdjust = monthsAbsolute - negYearAdjust * 12
						monthNumber = monthNumber - negMonthAdjust
						if monthNumber < 0
							monthNumber = 12 + monthNumber
							negYearAdjust++
						yearNumber = yearNumber - negYearAdjust
					# Catch case where next month has fewer days than the current date
					if fromDate.getDate() > 28
						monthNumber++
					while monthCounter > 0
						if monthNumber is 12
							monthNumber = 0
							yearNumber++
						monthNumber++
						daysInMonthsAdjust += numberOfDaysInMonth(yearNumber, monthNumber)
						monthCounter--
				if monthsNegative then daysInMonthsAdjust = -daysInMonthsAdjust
				adjustedTime = fromTime + (daysInMonthsAdjust * @DAY_MS) + (adjust.weeks * @WEEK_MS) + (adjust.days * @DAY_MS) + (adjust.hours * @HOUR_MS) + (adjust.minutes * @MINUTE_MS) + (adjust.seconds * @SECOND_MS)
				return adjustedTime
			else
				return fromTime
		else
			return fromTime


	generateIdString: (prefix = '', digits = 8) ->
		randomString = prefix
		possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456'
		for [0...digits]
			randomString += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length))
		return randomString

	numberOfDaysInMonth = (year, month) ->
		return new Date(year, month, 0).getDate()

	isInt: (n) ->
		return typeof n is 'number' and n % 1 is 0

class IHWW.Calendars.Group extends IHWW.Calendars

	constructor: (@attributes = {}) ->
		@id = @generateIdString()
		@type = @attributes.type or 'days'
		@change = @attributes.change or {days: 0}
		@from = @attributes.from or @NOW_TIME
		@number = @attributes.number or 3
		@weekStartDay = @attributes.weekStartDay or 'Wednesday'
		@days = {}
		@order = []
		if @type is 'month'
			generateMonth(@)
		else if @type is 'week'
			generateWeek(@)
		else
			generateDays(@)
		return @

	render: (style) ->
		renderedDays = ''
		weekDays = []
		fstDay = false
		focusDay = false
		lstDay = false
		if @order[0] instanceof Array
			for collection in @order
				weekDays = []
				renderedDays += '<tr>'
				for dayId in collection
					renderedDays += @days[dayId].render(@type, style)
					weekDays.push(@days[dayId])
					if not fstDay and not @days[dayId].placeholder
						fstDay = @days[dayId]
					else if not @days[dayId].placeholder
						lstDay = @days[dayId]
					if @days[dayId].today then focusDay = @days[dayId]
				renderedDays += '</tr>'
		else
			for dayId in @order
				renderedDays += @days[dayId].render(@type, style)
				weekDays.push(@days[dayId])
				if not fstDay and not @days[dayId].placeholder
					fstDay = @days[dayId]
				else if not @days[dayId].placeholder
					lstDay = @days[dayId]
				if @days[dayId].today then focusDay = @days[dayId]
		data =
			fstDay: fstDay
			focusDay: focusDay
			lstDay: lstDay
			group: @
			weekDays: weekDays
			days: renderedDays
			cart: window.cart or {}
		temp = nunjucks.render('static/partials/calendar/_' + @type + '-' + style + '.html', data)
		return temp

	generateDays = (group) ->
		dayStampTracker = group.calculateRelative(group.change, group.from)
		for [0...group.number]
			newday = new IHWW.Calendars.Day(dayStampTracker)
			group.days[newday.id] = newday
			group.order.push(newday.id)
			dayStampTracker += group.DAY_MS
		return group

	generateMonth = (group) ->
		startDayNumber = group.NAMES_DAY_LONG.indexOf(group.weekStartDay)
		fromDayTimeStamp = group.calculateRelative(group.change, group.from)
		fromDayDateStamp = new Date(fromDayTimeStamp)
		fromDayNumber = fromDayDateStamp.getDay()
		dayBaseNumber = startDayNumber - fromDayNumber
		if dayBaseNumber > 0
			dayBaseNumber = dayBaseNumber - 7
		fromDateNumber = fromDayDateStamp.getDate()
		dateTrackNumber = -(Math.floor(fromDateNumber / 7) + 1)
		monthTrack = fromDayDateStamp.getMonth() + 1
		for [0...7]
			weekAdjust = dateTrackNumber * group.WEEK_MS
			currentWeek = []
			dayTrackNumber = dayBaseNumber
			for [0...7]
				dayAdjust = dayTrackNumber * group.DAY_MS + weekAdjust
				newday = new IHWW.Calendars.Day(fromDayTimeStamp + dayAdjust)
				if newday.month isnt monthTrack then newday.updatePlaceholder(true)
				group.days[newday.id] = newday
				currentWeek.push(newday.id)
				dayTrackNumber++
			firstDaysMonth = group.days[currentWeek[0]].month
			lastDaysMonth = group.days[currentWeek[6]].month
			if firstDaysMonth is monthTrack or lastDaysMonth is monthTrack
				group.order.push(currentWeek)
			dateTrackNumber++
		return group

	generateWeek = (group) ->
		startDayNumber = group.NAMES_DAY_LONG.indexOf(group.weekStartDay)
		fromDayTimeStamp = group.calculateRelative(group.change, group.from)
		fromDayDateStamp = new Date(fromDayTimeStamp)
		fromDayNumber = fromDayDateStamp.getDay()
		dayTrackNumber = startDayNumber - fromDayNumber
		if dayTrackNumber > 0
			dayTrackNumber = dayTrackNumber - 7
		for [0...7]
			dayAdjust = dayTrackNumber * group.DAY_MS
			newday = new IHWW.Calendars.Day(fromDayTimeStamp + dayAdjust)
			group.days[newday.id] = newday
			group.order.push(newday.id)
			dayTrackNumber++
		return group

class IHWW.Calendars.Day extends IHWW.Calendars

	constructor: (@timeStamp) ->
		if @timeStamp and @isInt(@timeStamp)
			@id = @generateIdString()
			@dateStamp = new Date(@timeStamp)
			secondNumber = @dateStamp.getSeconds()
			minuteNumber = @dateStamp.getMinutes()
			hourNumber = @dateStamp.getHours()
			dayNumber = @dateStamp.getDay()
			dateNumber = @dateStamp.getDate()
			monthNumber = @dateStamp.getMonth()
			yearNumber = @dateStamp.getFullYear()
			@midnight = getTimeStampOfDayAtMidnight(@timeStamp)
			@past = if @midnight < getTimeStampOfDayAtMidnight(@NOW_TIME) then true else false
			@today = if @midnight is getTimeStampOfDayAtMidnight(@NOW_TIME) then true else false
			@weekend = if dayNumber is 0 or dayNumber is 6 then true else false
			@holiday = false
			@placeholder = false
			@seconds = secondNumber
			@secondsDD = if secondNumber.toString().length < 2 then '0' + secondNumber else secondNumber
			@minutes = minuteNumber
			@minutesDD = if minuteNumber.toString().length < 2 then '0' + minuteNumber else minuteNumber
			@hours12 = if hourNumber is 12 then 12 else hourNumber % 12
			@hours12DD = if @hours12.toString().length < 2 then '0' + @hours12 else @hours12
			@hours24 = hourNumber
			@hours24DD = if hourNumber.toString().length < 2 then '0' + hourNumber else hourNumber
			@ampm = if hourNumber > 11 then 'p' else 'a'
			@AMPM = if hourNumber > 11 then 'P' else 'A'
			@ampmDD = if hourNumber > 11 then 'pm' else 'am'
			@AMPMDD = if hourNumber > 11 then 'PM' else 'AM'
			@day = dayNumber
			@dateOrdinal = getOrdinal(dateNumber)
			@date = dateNumber
			@dateDD = if dateNumber.toString().length < 2 then '0' + dateNumber else dateNumber
			@dayShortName = @NAMES_DAY_SHORT[dayNumber]
			@dayLongName = @NAMES_DAY_LONG[dayNumber]
			@month = monthNumber + 1
			@monthDD = if @month.toString().length < 2 then '0' + @month else @month
			@monthShortName = @NAMES_MONTH_SHORT[monthNumber]
			@monthLongName = @NAMES_MONTH_LONG[monthNumber]
			@year = yearNumber
			@yearDD = yearNumber.toString().substring(2,4)
			@events = {}
			@order = []
			return @
		else return false

	getString: (format = '%M/%d/%yyyy') ->
		dateString = format
		dateString = dateString.replace(/%ss/g, @secondsDD)
		dateString = dateString.replace(/%s/g, @seconds)
		dateString = dateString.replace(/%mm/g, @minutesDD)
		dateString = dateString.replace(/%m/g, @minutes)
		dateString = dateString.replace(/%hh/g, @hours12DD)
		dateString = dateString.replace(/%h/g, @hours12)
		dateString = dateString.replace(/%HH/g, @hours24DD)
		dateString = dateString.replace(/%H/g, @hours24)
		dateString = dateString.replace(/%dddd/g, @dayLongName)
		dateString = dateString.replace(/%ddd/g, @dayShortName)
		dateString = dateString.replace(/%dd/g, @dateDD)
		dateString = dateString.replace(/%d/g, @date)
		dateString = dateString.replace(/%MMMM/g, @monthLongName)
		dateString = dateString.replace(/%MMM/g, @monthShortName)
		dateString = dateString.replace(/%MM/g, @monthDD)
		dateString = dateString.replace(/%M/g, @month)
		dateString = dateString.replace(/%yyyy/g, @year)
		dateString = dateString.replace(/%yy/g, @yearDD)
		dateString = dateString.replace(/%tt/g, @ampmDD)
		dateString = dateString.replace(/%t/g, @ampm)
		dateString = dateString.replace(/%TT/g, @AMPMDD)
		dateString = dateString.replace(/%T/g, @AMPM)
		dateString = dateString.replace(/%S/g, @dateOrdinal)
		return dateString

	render: (type = 'week', style = 'default') ->
		renderedEvents = ''
		for eventId in @order
			renderedEvents += @events[eventId].render(type, style)
		data =
			day: @
			weekDate: @getString('%ddd %MMM %d')
			monthDate: @getString('%ddd %MMM %d %yyyy')
			dateString: @getString('%yyyy-%MM-%dd')
			timeString: @getString('%HH:%mm:%ss')
			eventNumber: @order.length
			events: renderedEvents
		temp = nunjucks.render('static/partials/calendar/_day-' + type + '-' + style + '.html', data)
		return temp

	addEvent: (event) ->
		@events[event.id] = event
		currentEvents = @events
		@order.push(event.id)
		@order.sort((a, b) ->
			aTime = currentEvents[a].timeStamp
			bTime = currentEvents[b].timeStamp
			if (aTime < bTime)
				return -1
			if (aTime > bTime)
				return 1
			return 0
		)
		return @

	updatePlaceholder: (changeTo) ->
		@placeholder = changeTo
		return @

	getTimeStampOfDayAtMidnight = (timeStamp) ->
		midnightDateStamp = new Date(timeStamp)
		midnightTimeStamp = new Date(midnightDateStamp.getFullYear(), midnightDateStamp.getMonth(), midnightDateStamp.getDate()).getTime()
		return midnightTimeStamp

	getOrdinal = (number) ->
		if not isNaN(number)
			extensionArray = ['th', 'st', 'nd', 'rd']
			hundreth = number % 100
			return number + (extensionArray[(hundreth-20)%10] or extensionArray[hundreth] or extensionArray[0])
		else
			return ''

class IHWW.Calendars.Event extends IHWW.Calendars.Day

	constructor: (@attributes = {}) ->
		if @attributes.timeStamp
			super(@attributes.timeStamp)
			@eventId = @attributes.id or 'No id'
			@name = @attributes.name or 'No Name'
			@type = @attributes.cruise_type or 'none'
			@seats = @attributes.seats or 100
			@description = @attributes.description or 'No Description'
			@duration = @attributes.duration or 1
			return @
		else return false

	render: (type = 'week', style = 'default') ->
		data =
			event: @
			time: @getString('%h:%mm %tt')
			dateString: @getString('%yyyy-%MM-%dd')
			timeString: @getString('%HH:%mm:%ss')
		temp = nunjucks.render('static/partials/calendar/_event-' + type + '-' + style + '.html', data)
		return temp