from app import app, db, admin_permission, superadmin_permission
from models.account import Account, Role
from views.forms import AccountForm, RoleForm
from flask import render_template, redirect, url_for, flash, g
from flask.ext.login import login_required

@app.route('/admin/accounts', methods=['GET', 'POST'])
@login_required
@superadmin_permission.require(http_exception=403)
def accounts():
	accounts = db.session.query(Account).order_by('id').all()
	account_form = AccountForm()
	roles = db.session.query(Role).all()
	role_form = RoleForm()
	if account_form.validate_on_submit():
		account = Account(
			givenname = account_form.givenname.data,
			surname = account_form.surname.data,
			moniker = account_form.moniker.data,
			email = account_form.email.data,
			role = account_form.role.data)
		account.create_hash(account_form.password.data)
		db.session.add(account)
		db.session.commit()
		flash('Account ' + account_form.moniker.data + ' created.')
	else:
		if role_form.validate_on_submit():
			role = Role(name = role_form.name.data)
			db.session.add(role)
			db.session.commit()
			flash('Role ' + role_form.name.data + ' created.')
	return render_template('account/management.html',
		title = 'Account Management',
		accounts = accounts,
		account_form = account_form,
		roles = roles,
		role_form = role_form)

@app.route('/admin/account/<moniker>')
@login_required
def account(moniker):
	account = Account.query.filter_by(moniker = moniker).first()
	if account == None:
		flash('Account ' + moniker + ' not found.', 'caution')
		return redirect(url_for('accounts'))
	return render_template('account/show.html',
		title = 'Account',
		account = account)

@app.route('/admin/account/edit/<moniker>', methods = ['GET', 'POST'])
@login_required
@superadmin_permission.require(http_exception=403)
def account_edit(moniker):
	account = Account.query.filter_by(moniker = moniker).first()
	if account == None:
		flash('Account ' + moniker + ' not found.', 'caution')
		return redirect(url_for('accounts'))
	form = AccountForm(obj=account)
	if form.validate_on_submit():
		account.givenname = form.givenname.data
		account.surname = form.surname.data
		account.moniker = form.moniker.data
		account.email = form.email.data
		account.role = form.role.data
		account.achievements = form.achievements.data
		if form.password.data != "":
			account.create_hash(form.password.data)
		db.session.commit()
		flash('Account Updated', 'confirmed')
	return render_template('account/edit.html',
		title = 'Edit Account',
		form = form,
		account = account)

@app.route('/admin/account/edit', methods = ['GET', 'POST'])
@login_required
def account_selfedit():
	account = Account.query.get(g.account.id)
	if account == None:
		flash('Account ' + moniker + ' not found.', 'caution')
		return redirect(url_for('dashboard'))
	form = AccountForm(obj=account)
	if form.validate_on_submit():
		account.givenname = form.givenname.data
		account.surname = form.surname.data
		account.moniker = form.moniker.data
		account.email = form.email.data
		account.role = form.role.data
		account.create_hash(form.password.data)
		db.session.commit()
		flash('Account Updated', 'confirmed')
	return render_template('account/selfedit.html',
		title = 'Edit Your Account',
		form = form,
		account = account)

@app.route('/admin/account/delete/<moniker>')
@login_required
@superadmin_permission.require(http_exception=403)
def account_delete(moniker):
	account = Account.query.filter_by(moniker = moniker).first()
	if account == None:
		flash('Account ' + moniker + ' not found.', 'caution')
		return redirect(url_for('accounts'))
	db.session.delete(account)
	db.session.commit()
	flash('Account ' + moniker + ' deleted.', 'confirmed')
	return redirect(url_for('accounts'))

@app.route('/admin/account/role/edit/<name>', methods = ['GET', 'POST'])
@login_required
@superadmin_permission.require(http_exception=403)
def role_edit(name):
	role = Role.query.filter_by(name = name).first()
	if role == None:
		flash('Role ' + name + ' not found.', 'caution')
		return redirect(url_for('accounts'))
	form = RoleForm(obj=role)
	if form.validate_on_submit():
		role.name = form.name.data
		db.session.commit()
		flash('Role Updated', 'confirmed')
	return render_template('account/role_edit.html',
		title = 'Edit Role',
		form = form,
		role = role)

@app.route('/admin/account/role/delete/<name>')
@login_required
@superadmin_permission.require(http_exception=403)
def role_delete(name):
	role = Role.query.filter_by(name = name).first()
	if role == None:
		flash('Role ' + name + ' not found.', 'caution')
		return redirect(url_for('accounts'))
	db.session.delete(role)
	db.session.commit()
	flash('Role ' + name + ' deleted.', 'confirmed')
	return redirect(url_for('accounts'))