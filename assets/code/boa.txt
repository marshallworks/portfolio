window.BoAm = if typeof BoAm isnt 'undefined' then BoAm else {}

class BoAm.Controller
	_init = false
	data = false
	timeoutCbs = null
	timeoutSender = null
	timeoutSource = null
	timeoutCallback = null
	pausedCBs = []
	pausedSender = {}
	pausedSource = {}

	constructor: (@attributes) ->
		if not _init
			data = BoAm.Data(['contacts', 'phonenumbers', 'transactions', 'accounts', 'customers', 'countrys'])
			if data
				_init = true
				dbc.message('BoAm Controller initialized.')
			else
				dbc.message('BoAm Controller components failed to initialize.', 'error')
		else
			dbc.message('BoAm Controller already initialized.', 'caution')
		return @

	@getDataByType: (type) ->
		returnData = {}
		baseCustomer = BoAm.Data.getByModelFieldValue('customers', 'name', 'Robin Smith')
		switch type
			when 'customer' then returnData = baseCustomer
			when 'accounts' then returnData = baseCustomer.account_lists
			when 'contacts' then returnData = baseCustomer.contact_list
		return returnData

	@getDataByModelFieldValue: (getArray) ->
		return BoAm.Data.getByModelFieldValue(getArray[0] + 's', getArray[1], getArray[2])

	@dataProcessed: ->
		BoAm.Router()

	@processActions: (actions, event) ->
		event.preventDefault()
		sender = $(event.target)
		source = $(event.currentTarget)
		if actions instanceof Array
			BoAm.Controller.chainedCallback(actions, sender, source)
		else
			BoAm.Controller.chainedCallback([actions], sender, source)

	@processOnloadActions: (actions) ->
		if actions instanceof Array
			actionsCopy = new Array()
			for action in actions
				actionsCopy.push(action)
			BoAm.Controller.chainedCallback(actionsCopy, $('.primary-page'))
		else
			BoAm.Controller.chainedCallback([actions], $('.primary-page'))

	@chainedCallback: (callbackArray = [], sender, source) ->
		if callbackArray.length > 0
			currentFunction = callbackArray[0]
			currentArguments = currentFunction.split('-')
			if currentArguments[0] is 'run'
				callbackArray.splice(0,1)
				currentArguments.splice(0,1)
				runFunctions(currentArguments, sender, source, callbackArray)
			else if currentArguments[0] is 'goto' or currentArguments[0] is 'prep'
				callbackArray.splice(0,1)
				currentArguments.splice(0,1)
				gotoFunctions(currentArguments, sender, source, callbackArray)
			else if currentArguments[0] is 'flash' or currentArguments[0] is 'confirm'
				callbackArray.splice(0,1)
				currentArguments.splice(0,1)
				flashFunctions(currentArguments, sender, source, callbackArray)
			else if currentArguments[0] is 'transition'
				callbackArray.splice(0,1)
				currentArguments.splice(0,1)
				transitionFunctions(currentArguments, sender, source, callbackArray)
			else
				dbc.message('Function not recognized in chain: ' + currentFunction, 'caution')
				callbackArray.splice(0,1)
				BoAm.Controller.chainedCallback(callbackArray)
		else
			dbc.message('Callback Chain completed.')

	@resumeCallback: ->
		dbc.message('Resuming Callback Chain.')
		BoAm.Controller.chainedCallback(pausedCBs, pausedSender, pausedSource)

	runFunctions = (options, sender, source, cbs) ->
		paramStart = options[0].indexOf('(')
		paramEnd = options[0].indexOf(')')
		functionName = options[0].substring(0, paramStart)
		functionParameters = options[0].substring(paramStart + 1, paramEnd).split(',')
		functionRan = false
		if functionName is 'delay'
			startTimeOut(cbs, sender, source, functionParameters)
			functionRan = false
		if functionName is 'clearDelay'
			functionRan = runClearDelay()
		if functionName is 'quickFill'
			functionRan = runQuickfill(functionParameters)
		if functionName is 'toggleValue'
			functionRan = runToggleValue(functionParameters)
		if functionName is 'setValue'
			functionRan = runSetValue(functionParameters)
		if functionName is 'getValues'
			functionRan = runGetValues(functionParameters)
		if functionName is 'getSelect'
			selected = ''
			if sender and (sender.prop('tagName') is 'A' or sender.prop('tagName') is 'LI')
				selected = sender.find('.select-value').text()
			else if sender
				selected = sender.parents('a,li').first().find('.select-value').text()
			functionRan = runGetSelect(functionParameters, selected)
		if functionName is 'getMultiSelect'
			functionRan = runGetMultiSelect(functionParameters, source, sender)
		if functionName is 'getObjectSelect'
			id = if sender and sender.attr('href') then sender.attr('href') else sender.parents('a').attr('href')
			if sender and not id then id = sender.find('a').first().attr('href')
			functionRan = runGetObjectSelect(functionParameters, id)
		if functionName is 'resetSection'
			functionRan = runResetSection(functionParameters)
		if functionName is 'setReturn'
			functionRan = runSetReturn(functionParameters)
		if functionName is 'getReturn'
			returnLocation = BoAm.Helper.getReturnPoint()
			if not returnLocation or returnLocation.length < 1
				returnLocation = functionParameters[0]
			cbs.unshift('prep-' + returnLocation)
			functionRan = true
		if functionName is 'toggleCheckbox'
			functionRan = runToggleCheckbox(functionParameters, sender)
		if functionName is 'displaySelected'
			selected = ''
			if sender and (sender.prop('tagName') is 'A' or sender.prop('tagName') is 'LI')
				selected = sender
			else if sender
				selected = sender.parents('a,li')
			functionRan = runDisplaySelected(functionParameters, selected)
		if functionName is 'enableNextButton'
			functionRan = runEnableNextButton(functionParameters)
		if functionName is 'toggleClass'
			functionRan = runToggleClass(functionParameters, source)
		if functionName is 'toggleValidates'
			functionRan = runToggleValidates(source)
		if functionName is 'toggleVisible'
			functionRan = runToggleVisible(functionParameters)
		if functionName is 'toggleSlide'
			functionRan = runToggleSlide(functionParameters, source, sender)
		if functionName is 'toggleSlideAll'
			functionRan = runToggleSlideAll()
		if functionName is 'addPageClass'
			functionRan = runAddPageClass(functionParameters)
		if functionName is 'updateTransactionDescription'
			functionRan = runUpdateTransactionDescription(functionParameters)
		if functionName is 'checkDeposit'
			functionRan = runCheckDeposit(functionParameters)
		if functionName is 'addSendToAccount'
			functionRan = runAddSendToAccount()
		if functionRan then BoAm.Controller.chainedCallback(cbs, sender, source)

	gotoFunctions = (options, sender, source, cbs) ->
		senderTarget = if sender and sender.attr('href') then sender.attr('href') else sender.parents('a').attr('href')
		transition = false
		for callback in cbs
			if not transition
				if callback.indexOf('transition') isnt - 1
					if callback.indexOf('right') isnt - 1
						transition = 'left'
					if callback.indexOf('left') isnt - 1
						transition = 'right'
					if callback.indexOf('up') isnt - 1
						transition = 'bottom'
					if callback.indexOf('down') isnt - 1
						transition = 'top'
					if callback.indexOf('fade') isnt - 1
						transition = 'fade'
		templateLocation = '/' + options[0]
		if senderTarget and senderTarget isnt '#' then templateLocation = templateLocation + '/' + senderTarget
		if transition
			BoAm.Router.prep(templateLocation, transition)
		else
			BoAm.Router.goto(templateLocation)
		BoAm.Template.justHideMenu()
		BoAm.Controller.chainedCallback(cbs, sender, source)

	flashFunctions = (options, sender, source, cbs) ->
		BoAm.Helper.openAlert(options[0])
		pauseCallback(cbs, sender, source)

	startTimeOut = (cbs, sender, source, options) ->
		dbc.message('Timout started for ' + options[0] + 's.')
		if timeoutCallback isnt null
			clearTimeout(timeoutCallback)
			timeoutCallback = null
		timeoutCbs = cbs
		timeoutSender = sender
		timeoutSource = source
		timeoutCallback = setTimeout(stopTimeOut, options[0]*1000)

	stopTimeOut = ->
		dbc.message('Timeout complete.')
		BoAm.Controller.chainedCallback(timeoutCbs, timeoutSender, timeoutSource)

	runClearDelay = ->
		dbc.message('Clearing timeout.')
		if timeoutCallback isnt null
			clearTimeout(timeoutCallback)
		timeoutCallback = null
		timeoutCbs = null
		timeoutSender = null
		return true

	transitionFunctions = (options, sender, source, cbs) ->
		BoAm.Template.transitionPage()
		BoAm.Controller.chainedCallback(cbs, sender, source)

	pauseCallback = (cbs, sender, source) ->
		dbc.message('Pausing Callback Chain.')
		pausedCBs = cbs
		pausedSender = sender
		pausedSource = source
		return true

	runQuickfill = (options) ->
		$('.' + options[0]).parent().addClass('with-value')
		$('.' + options[0]).text(options[1])
		return true

	runToggleValue = (options) ->
		current = BoAm.Helper.getSectionValue(options[0], options[1])
		if current is true
			BoAm.Helper.setSectionValue(options[0], options[1], false)
		else
			BoAm.Helper.setSectionValue(options[0], options[1], true)

	runSetValue = (options) ->
		BoAm.Helper.setSectionValue(options[0], options[1], options[2])
		return true

	runGetValues = (options) ->
		section = options.shift()
		keyArray = options
		for key in keyArray
			value = $('.' + key).text()
			BoAm.Helper.setSectionValue(section, key, value)
		return true

	runGetSelect = (options, value) ->
		section = options[0]
		key = options[1]
		BoAm.Helper.setSectionValue(section, key, value)
		return true

	runGetMultiSelect = (options, source, sender) ->
		selectList = ''
		$('input[type="checkbox"]:checked').each(->
			selectList += $(this).parents('li').first().find('.select-value').text() + ', '
		)
		selectList = selectList.substring(0, selectList.length - 2)
		shorterList = if selectList.length > 15 then  selectList.substring(0, 14) + '&hellip;' else selectList
		BoAm.Helper.setSectionValue(options[0], options[1], selectList)
		BoAm.Helper.setSectionValue(options[0], options[1] + '_short', shorterList)
		return true

	runGetObjectSelect = (options, value) ->
		modelField = options[0].split('_')
		model = modelField[0]
		field = modelField[1]
		section = options[1]
		key = options[2]
		getObject = BoAm.Controller.getDataByModelFieldValue([model, field, value])
		BoAm.Helper.setSectionValue(section, key, getObject)
		return true

	runResetSection = (options) ->
		for section in options
			BoAm.Helper.resetSectionValue(section)
		return true

	runSetReturn = (options) ->
		if options[0].length > 0
			location = options[0]
		else
			location = window.location.hash.substring(2)
		BoAm.Helper.setReturnPoint(location)
		return true

	runToggleCheckbox = (options, sender) ->
		for checkbox in options
			if checkbox is 'this'
				if sender.prop('tagName') is 'INPUT'
					checkBoxEle = sender
				else
					checkBoxEle = sender.parents('li').first().find('input[type=checkbox]')
			else
				checkBoxEle = $('.' + checkbox)
			checkBoxEle.prop("checked", !checkBoxEle.prop("checked"))
		return true

	runDisplaySelected = (options, selected) ->
		$('.selected_item_active').removeClass('selected_item_active')
		selected.addClass('selected_item_active')
		return true

	runEnableNextButton = (options) ->
		enableColor = options[0]
		$('.' + enableColor + '-inactive').each(->
			$(this).removeClass(enableColor + '-inactive')
			$(this).addClass(enableColor + '-active')
		)
		return true

	runToggleClass = (options, source) ->
		source.toggleClass(options.join(' '))
		return true

	runToggleValidates = (source) ->
		$('.validate').toggleClass('true')
		$('.validate').toggleClass('false')
		return true

	runToggleVisible = (options) ->
		for area in options
			$('.' + area).toggle()
		return true

	runToggleSlide = (options, source, sender) ->
		if sender.parents('li').first().hasClass('toggle-slider')
			source.find('ul').first().slideToggle()
			source.toggleClass('active')
		return true

	runToggleSlideAll = ->
		$('.toggle-slider ul').slideToggle()
		return true

	runAddPageClass = (options) ->
		for pageClass in options
			$('.primary-page').addClass(pageClass)
		return true

	runUpdateTransactionDescription = ->
		transId = BoAm.Helper.getSectionValue('accounts', 'trans_id')
		transDescription = BoAm.Helper.getSectionValue('accounts', 'trans_description')
		changeTransaction = BoAm.Data.getByModelFieldValue('transactions', 'setid', transId)
		changeTransaction.personal_description = transDescription
		return true

	runCheckDeposit = ->
		depositAmount = BoAm.Helper.getSectionValue('deposit', 'amount')
		depositTo = BoAm.Helper.getSectionValue('deposit', 'deposit_to')
		newTransactionObject =
			day_adjust: 1
			month_adjust: 0
			system_description: 'BKOFAMERICA MOBILE'
			type: 'deposit'
			status: 'processing'
			amount: depositAmount
		depositAccount = BoAm.Data.getByModelFieldValue('accounts', 'setid', depositTo.setid)
		depositAccount.add_transaction(newTransactionObject)
		BoAm.Helper.setReturnPoint('accounts/account_activity/' + depositAccount.setid)
		return true

	runAddSendToAccount = ->
		newAccountObject =
			email_phone: BoAm.Helper.getSectionValue('transfers_recipient', 'recipient_email_phone')
			first: BoAm.Helper.getSectionValue('transfers_recipient', 'recipient_first')
			last: BoAm.Helper.getSectionValue('transfers_recipient', 'recipient_last')
			nick: BoAm.Helper.getSectionValue('transfers_recipient', 'recipient_nick')
		baseCustomer = BoAm.Data.getByModelFieldValue('customers', 'name', 'Robin Smith')
		baseCustomer.add_account('sendto', newAccountObject)
		return true